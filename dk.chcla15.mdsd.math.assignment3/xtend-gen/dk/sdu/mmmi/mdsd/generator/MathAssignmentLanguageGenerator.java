/**
 * generated by Xtext 2.21.0
 */
package dk.sdu.mmmi.mdsd.generator;

import com.google.common.collect.Iterators;
import dk.sdu.mmmi.mdsd.mathAssignmentLanguage.Div;
import dk.sdu.mmmi.mdsd.mathAssignmentLanguage.Expression;
import dk.sdu.mmmi.mdsd.mathAssignmentLanguage.Let;
import dk.sdu.mmmi.mdsd.mathAssignmentLanguage.MathExp;
import dk.sdu.mmmi.mdsd.mathAssignmentLanguage.Minus;
import dk.sdu.mmmi.mdsd.mathAssignmentLanguage.Mult;
import dk.sdu.mmmi.mdsd.mathAssignmentLanguage.Num;
import dk.sdu.mmmi.mdsd.mathAssignmentLanguage.Plus;
import dk.sdu.mmmi.mdsd.mathAssignmentLanguage.ResultStatement;
import dk.sdu.mmmi.mdsd.mathAssignmentLanguage.Var;
import java.util.HashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Consumer;
import javax.swing.JOptionPane;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MathAssignmentLanguageGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final MathExp math = Iterators.<MathExp>filter(resource.getAllContents(), MathExp.class).next();
    final HashMap<ResultStatement, Integer> results = this.compute(math);
    String _display = this.display(math);
    String _plus = ("Math expressions = \n" + _display);
    System.out.println(_plus);
    JOptionPane.showMessageDialog(null, this.prettyPrint(results), "Math Language", JOptionPane.INFORMATION_MESSAGE);
  }
  
  public HashMap<ResultStatement, Integer> compute(final MathExp math) {
    final HashMap<ResultStatement, Integer> results = new HashMap<ResultStatement, Integer>();
    final Consumer<ResultStatement> _function = (ResultStatement r) -> {
      Expression _exp = r.getExp();
      HashMap<String, Integer> _hashMap = new HashMap<String, Integer>();
      results.put(r, Integer.valueOf(this.computeExp(_exp, _hashMap)));
    };
    math.getResultStatements().forEach(_function);
    return results;
  }
  
  public String prettyPrint(final HashMap<ResultStatement, Integer> map) {
    final StringBuilder displayStrings = new StringBuilder();
    final BiConsumer<ResultStatement, Integer> _function = (ResultStatement r, Integer i) -> {
      String _label = r.getLabel();
      String _plus = ("result \"" + _label);
      String _plus_1 = (_plus + "\" is ");
      String _plus_2 = (_plus_1 + i);
      String _plus_3 = (_plus_2 + "\n");
      displayStrings.append(_plus_3);
    };
    map.forEach(_function);
    return displayStrings.toString();
  }
  
  public String display(final MathExp math) {
    final StringBuilder displayStrings = new StringBuilder();
    final Consumer<ResultStatement> _function = (ResultStatement r) -> {
      String _displayExp = this.displayExp(r.getExp());
      String _plus = (_displayExp + "\n");
      displayStrings.append(_plus);
    };
    math.getResultStatements().forEach(_function);
    return displayStrings.toString();
  }
  
  public int computeExp(final Expression exp, final Map<String, Integer> env) {
    Integer _switchResult = null;
    boolean _matched = false;
    if (exp instanceof Plus) {
      _matched=true;
      int _computeExp = this.computeExp(((Plus)exp).getLeft(), env);
      int _computeExp_1 = this.computeExp(((Plus)exp).getRight(), env);
      _switchResult = Integer.valueOf((_computeExp + _computeExp_1));
    }
    if (!_matched) {
      if (exp instanceof Minus) {
        _matched=true;
        int _computeExp = this.computeExp(((Minus)exp).getLeft(), env);
        int _computeExp_1 = this.computeExp(((Minus)exp).getRight(), env);
        _switchResult = Integer.valueOf((_computeExp - _computeExp_1));
      }
    }
    if (!_matched) {
      if (exp instanceof Mult) {
        _matched=true;
        int _computeExp = this.computeExp(((Mult)exp).getLeft(), env);
        int _computeExp_1 = this.computeExp(((Mult)exp).getRight(), env);
        _switchResult = Integer.valueOf((_computeExp * _computeExp_1));
      }
    }
    if (!_matched) {
      if (exp instanceof Div) {
        _matched=true;
        int _computeExp = this.computeExp(((Div)exp).getLeft(), env);
        int _computeExp_1 = this.computeExp(((Div)exp).getRight(), env);
        _switchResult = Integer.valueOf((_computeExp / _computeExp_1));
      }
    }
    if (!_matched) {
      if (exp instanceof Num) {
        _matched=true;
        _switchResult = Integer.valueOf(((Num)exp).getValue());
      }
    }
    if (!_matched) {
      if (exp instanceof Var) {
        _matched=true;
        _switchResult = env.get(((Var)exp).getId());
      }
    }
    if (!_matched) {
      if (exp instanceof Let) {
        _matched=true;
        _switchResult = Integer.valueOf(this.computeExp(((Let)exp).getBody(), this.bind(env, ((Let)exp).getId(), this.computeExp(((Let)exp).getBinding(), env))));
      }
    }
    if (!_matched) {
      throw new Error("Invalid expression");
    }
    return (_switchResult).intValue();
  }
  
  public Map<String, Integer> bind(final Map<String, Integer> env1, final String name, final int value) {
    HashMap<String, Integer> _xblockexpression = null;
    {
      final HashMap<String, Integer> env2 = new HashMap<String, Integer>(env1);
      env2.put(name, Integer.valueOf(value));
      _xblockexpression = env2;
    }
    return _xblockexpression;
  }
  
  public String displayExp(final Expression exp) {
    CharSequence _switchResult = null;
    boolean _matched = false;
    if (exp instanceof Plus) {
      _matched=true;
      String _displayExp = this.displayExp(((Plus)exp).getLeft());
      String _plus = (_displayExp + "+");
      String _displayExp_1 = this.displayExp(((Plus)exp).getRight());
      _switchResult = (_plus + _displayExp_1);
    }
    if (!_matched) {
      if (exp instanceof Minus) {
        _matched=true;
        String _displayExp = this.displayExp(((Minus)exp).getLeft());
        String _plus = (_displayExp + "-");
        String _displayExp_1 = this.displayExp(((Minus)exp).getRight());
        _switchResult = (_plus + _displayExp_1);
      }
    }
    if (!_matched) {
      if (exp instanceof Mult) {
        _matched=true;
        String _displayExp = this.displayExp(((Mult)exp).getLeft());
        String _plus = (_displayExp + "*");
        String _displayExp_1 = this.displayExp(((Mult)exp).getRight());
        _switchResult = (_plus + _displayExp_1);
      }
    }
    if (!_matched) {
      if (exp instanceof Div) {
        _matched=true;
        String _displayExp = this.displayExp(((Div)exp).getLeft());
        String _plus = (_displayExp + "/");
        String _displayExp_1 = this.displayExp(((Div)exp).getRight());
        _switchResult = (_plus + _displayExp_1);
      }
    }
    if (!_matched) {
      if (exp instanceof Num) {
        _matched=true;
        _switchResult = Integer.toString(((Num)exp).getValue());
      }
    }
    if (!_matched) {
      if (exp instanceof Var) {
        _matched=true;
        _switchResult = ((Var)exp).getId();
      }
    }
    if (!_matched) {
      if (exp instanceof Let) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("let ");
        String _id = ((Let)exp).getId();
        _builder.append(_id);
        _builder.append(" = ");
        String _displayExp = this.displayExp(((Let)exp).getBinding());
        _builder.append(_displayExp);
        _builder.append(" in ");
        String _displayExp_1 = this.displayExp(((Let)exp).getBody());
        _builder.append(_displayExp_1);
        _builder.append(" end");
        _switchResult = _builder;
      }
    }
    if (!_matched) {
      throw new Error("Invalid expression");
    }
    String _plus = ("(" + _switchResult);
    return (_plus + ")");
  }
}
