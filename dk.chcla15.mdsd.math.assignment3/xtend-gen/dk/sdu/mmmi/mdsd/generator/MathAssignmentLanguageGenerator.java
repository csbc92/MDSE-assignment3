/**
 * generated by Xtext 2.21.0
 */
package dk.sdu.mmmi.mdsd.generator;

import com.google.common.collect.Iterables;
import com.google.common.collect.Iterators;
import dk.sdu.mmmi.mdsd.mathAssignmentLanguage.Div;
import dk.sdu.mmmi.mdsd.mathAssignmentLanguage.Expression;
import dk.sdu.mmmi.mdsd.mathAssignmentLanguage.ExternalDef;
import dk.sdu.mmmi.mdsd.mathAssignmentLanguage.ExternalUse;
import dk.sdu.mmmi.mdsd.mathAssignmentLanguage.Let;
import dk.sdu.mmmi.mdsd.mathAssignmentLanguage.MathExp;
import dk.sdu.mmmi.mdsd.mathAssignmentLanguage.Minus;
import dk.sdu.mmmi.mdsd.mathAssignmentLanguage.Mult;
import dk.sdu.mmmi.mdsd.mathAssignmentLanguage.Num;
import dk.sdu.mmmi.mdsd.mathAssignmentLanguage.Parameter;
import dk.sdu.mmmi.mdsd.mathAssignmentLanguage.Plus;
import dk.sdu.mmmi.mdsd.mathAssignmentLanguage.ResultStatement;
import dk.sdu.mmmi.mdsd.mathAssignmentLanguage.Var;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Consumer;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.StringExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MathAssignmentLanguageGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    final MathExp math = Iterators.<MathExp>filter(resource.getAllContents(), MathExp.class).next();
    fsa.generateFile("MathComputation.java", this.compile(math));
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("#!/bin/bash");
    _builder.newLine();
    _builder.append("javac MathComputation.java");
    _builder.newLine();
    _builder.append("java MathComputation");
    _builder.newLine();
    fsa.generateFile("compileAndRun.sh", _builder);
  }
  
  public CharSequence compile(final MathExp math) {
    CharSequence _xblockexpression = null;
    {
      final String className = "MathComputation";
      final Iterable<ExternalDef> externalDefs = Iterables.<ExternalDef>filter(math.getDeclarations(), ExternalDef.class);
      final Iterable<ResultStatement> resultStatements = Iterables.<ResultStatement>filter(math.getDeclarations(), ResultStatement.class);
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("/*");
      _builder.newLine();
      _builder.append("* -- AUTO-GENERATED CODE --");
      _builder.newLine();
      _builder.append("* --   DO NOT MODIFY!    --");
      _builder.newLine();
      _builder.append("*/");
      _builder.newLine();
      _builder.append("public class ");
      _builder.append(className);
      _builder.append(" {");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("/*");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("* Fields");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("*/");
      _builder.newLine();
      {
        int _length = ((Object[])Conversions.unwrapArray(externalDefs, Object.class)).length;
        boolean _greaterThan = (_length > 0);
        if (_greaterThan) {
          _builder.append("\t");
          _builder.append("private Externals externals;");
          _builder.newLine();
        }
      }
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("/*");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("* Constructors");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("*/");
      _builder.newLine();
      {
        int _length_1 = ((Object[])Conversions.unwrapArray(externalDefs, Object.class)).length;
        boolean _greaterThan_1 = (_length_1 > 0);
        if (_greaterThan_1) {
          _builder.append("\t");
          _builder.append("public ");
          _builder.append(className, "\t");
          _builder.append("(Externals externals) {");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("\t");
          _builder.append("this.externals = externals;");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
          _builder.append("\t");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("/*");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("* External functions");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("*/");
          _builder.newLine();
          _builder.append("\t");
          _builder.append("public static interface Externals {");
          _builder.newLine();
          {
            for(final ExternalDef externalDef : externalDefs) {
              _builder.append("\t");
              _builder.append("\t");
              String _generateExternalSignature = this.generateExternalSignature(externalDef);
              _builder.append(_generateExternalSignature, "\t\t");
              _builder.newLineIfNotEmpty();
            }
          }
          _builder.append("\t");
          _builder.append("}");
          _builder.newLine();
        } else {
          _builder.append("\t");
          _builder.append("public ");
          _builder.append(className, "\t");
          _builder.append("() { }");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("/*");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("* Public methods");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public void compute() {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("// Call compute on each result-statement");
      _builder.newLine();
      {
        for(final ResultStatement resultStatement : resultStatements) {
          _builder.append("\t\t");
          _builder.append("System.out.println(\"");
          String _label = resultStatement.getLabel();
          _builder.append(_label, "\t\t");
          _builder.append(" \" + compute");
          String _firstUpper = StringExtensions.toFirstUpper(this.convertTolegalJavaIdentifier(resultStatement.getLabel()));
          _builder.append(_firstUpper, "\t\t");
          _builder.append("());");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("/*");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("* Result statements");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("*/");
      _builder.newLine();
      {
        for(final ResultStatement resultStatement_1 : resultStatements) {
          _builder.append("\t");
          String _generatePrivateMethod = this.generatePrivateMethod(resultStatement_1);
          _builder.append(_generatePrivateMethod, "\t");
          _builder.newLineIfNotEmpty();
        }
      }
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("/*");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("* Main methods");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("*/");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("public static void main(String[] args) {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("new ");
      _builder.append(className, "\t\t");
      _builder.append("().compute();");
      _builder.newLineIfNotEmpty();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      _xblockexpression = _builder;
    }
    return _xblockexpression;
  }
  
  public String generateExternalSignature(final ExternalDef exDef) {
    final EList<Parameter> parameters = exDef.getParameters();
    final StringBuilder parameterString = new StringBuilder();
    for (final Parameter parameter : parameters) {
      {
        int _length = parameterString.length();
        boolean _greaterThan = (_length > 0);
        if (_greaterThan) {
          parameterString.append(", ");
        }
        parameterString.append(parameter.getType().getName()).append(" ").append(parameter.getParameterName());
      }
    }
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public int ");
    String _name = exDef.getName();
    _builder.append(_name);
    _builder.append("(");
    _builder.append(parameterString);
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  public String generatePrivateMethod(final ResultStatement r) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("private int compute");
    String _firstUpper = StringExtensions.toFirstUpper(this.convertTolegalJavaIdentifier(r.getLabel()));
    _builder.append(_firstUpper);
    _builder.append("() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("return ");
    Expression _exp = r.getExp();
    HashMap<String, Integer> _hashMap = new HashMap<String, Integer>();
    String _compile = this.compile(_exp, _hashMap);
    _builder.append(_compile, "\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
  
  public String convertTolegalJavaIdentifier(final String s) {
    final String validChars = "[a-z]|[A-Z]|\\d|[_]";
    final HashSet<String> illegalChars = new HashSet<String>();
    String validIdentifier = new String(s);
    for (int i = 0; (i < s.length()); i++) {
      {
        final String myChar = s.substring(i, (i + 1));
        boolean _matches = myChar.matches(validChars);
        boolean _not = (!_matches);
        if (_not) {
          illegalChars.add(myChar);
        }
      }
    }
    for (final String illegalChar : illegalChars) {
      validIdentifier = validIdentifier.replace(illegalChar, "");
    }
    return validIdentifier;
  }
  
  public String compile(final Expression exp, final Map<String, Integer> env) {
    CharSequence _switchResult = null;
    boolean _matched = false;
    if (exp instanceof Plus) {
      _matched=true;
      StringConcatenation _builder = new StringConcatenation();
      String _compile = this.compile(((Plus)exp).getLeft(), env);
      _builder.append(_compile);
      _builder.append("+");
      String _compile_1 = this.compile(((Plus)exp).getRight(), env);
      _builder.append(_compile_1);
      _switchResult = _builder;
    }
    if (!_matched) {
      if (exp instanceof Minus) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        String _compile = this.compile(((Minus)exp).getLeft(), env);
        _builder.append(_compile);
        _builder.append("-");
        String _compile_1 = this.compile(((Minus)exp).getRight(), env);
        _builder.append(_compile_1);
        _switchResult = _builder;
      }
    }
    if (!_matched) {
      if (exp instanceof Mult) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        String _compile = this.compile(((Mult)exp).getLeft(), env);
        _builder.append(_compile);
        _builder.append("*");
        String _compile_1 = this.compile(((Mult)exp).getRight(), env);
        _builder.append(_compile_1);
        _switchResult = _builder;
      }
    }
    if (!_matched) {
      if (exp instanceof Div) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        String _compile = this.compile(((Div)exp).getLeft(), env);
        _builder.append(_compile);
        _builder.append("/");
        String _compile_1 = this.compile(((Div)exp).getRight(), env);
        _builder.append(_compile_1);
        _switchResult = _builder;
      }
    }
    if (!_matched) {
      if (exp instanceof Num) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        int _value = ((Num)exp).getValue();
        _builder.append(_value);
        _switchResult = _builder;
      }
    }
    if (!_matched) {
      if (exp instanceof Var) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        Integer _get = env.get(((Var)exp).getId());
        _builder.append(_get);
        _switchResult = _builder;
      }
    }
    if (!_matched) {
      if (exp instanceof ExternalUse) {
        _matched=true;
        CharSequence _xblockexpression = null;
        {
          final StringBuilder extArguments = new StringBuilder();
          EList<Expression> _arguments = ((ExternalUse)exp).getArguments();
          for (final Expression extExp : _arguments) {
            {
              int _length = extArguments.length();
              boolean _greaterThan = (_length > 0);
              if (_greaterThan) {
                extArguments.append(", ");
              }
              extArguments.append("(").append(this.compile(extExp, env)).append(")");
            }
          }
          StringConcatenation _builder = new StringConcatenation();
          _builder.append("externals.");
          String _name = ((ExternalUse)exp).getExternal().getName();
          _builder.append(_name);
          _builder.append("(");
          _builder.append(extArguments);
          _builder.append(")");
          _xblockexpression = _builder;
        }
        _switchResult = _xblockexpression;
      }
    }
    if (!_matched) {
      throw new Error("Compile: Invalid expression");
    }
    String _plus = ("(" + _switchResult);
    return (_plus + ")");
  }
  
  public HashMap<ResultStatement, Integer> compute(final MathExp math) {
    final HashMap<ResultStatement, Integer> results = new HashMap<ResultStatement, Integer>();
    final Consumer<ResultStatement> _function = (ResultStatement r) -> {
      Expression _exp = r.getExp();
      HashMap<String, Integer> _hashMap = new HashMap<String, Integer>();
      results.put(r, Integer.valueOf(this.computeExp(_exp, _hashMap)));
    };
    Iterables.<ResultStatement>filter(math.getDeclarations(), ResultStatement.class).forEach(_function);
    return results;
  }
  
  public String prettyPrint(final HashMap<ResultStatement, Integer> map) {
    final StringBuilder displayStrings = new StringBuilder();
    final BiConsumer<ResultStatement, Integer> _function = (ResultStatement r, Integer i) -> {
      String _label = r.getLabel();
      String _plus = ("result \"" + _label);
      String _plus_1 = (_plus + "\" is ");
      String _plus_2 = (_plus_1 + i);
      String _plus_3 = (_plus_2 + "\n");
      displayStrings.append(_plus_3);
    };
    map.forEach(_function);
    return displayStrings.toString();
  }
  
  public String display(final MathExp math) {
    final StringBuilder displayStrings = new StringBuilder();
    final Consumer<ResultStatement> _function = (ResultStatement r) -> {
      String _displayExp = this.displayExp(r.getExp());
      String _plus = (_displayExp + "\n");
      displayStrings.append(_plus);
    };
    Iterables.<ResultStatement>filter(math.getDeclarations(), ResultStatement.class).forEach(_function);
    return displayStrings.toString();
  }
  
  public int computeExp(final Expression exp, final Map<String, Integer> env) {
    Integer _switchResult = null;
    boolean _matched = false;
    if (exp instanceof Plus) {
      _matched=true;
      int _computeExp = this.computeExp(((Plus)exp).getLeft(), env);
      int _computeExp_1 = this.computeExp(((Plus)exp).getRight(), env);
      _switchResult = Integer.valueOf((_computeExp + _computeExp_1));
    }
    if (!_matched) {
      if (exp instanceof Minus) {
        _matched=true;
        int _computeExp = this.computeExp(((Minus)exp).getLeft(), env);
        int _computeExp_1 = this.computeExp(((Minus)exp).getRight(), env);
        _switchResult = Integer.valueOf((_computeExp - _computeExp_1));
      }
    }
    if (!_matched) {
      if (exp instanceof Mult) {
        _matched=true;
        int _computeExp = this.computeExp(((Mult)exp).getLeft(), env);
        int _computeExp_1 = this.computeExp(((Mult)exp).getRight(), env);
        _switchResult = Integer.valueOf((_computeExp * _computeExp_1));
      }
    }
    if (!_matched) {
      if (exp instanceof Div) {
        _matched=true;
        int _computeExp = this.computeExp(((Div)exp).getLeft(), env);
        int _computeExp_1 = this.computeExp(((Div)exp).getRight(), env);
        _switchResult = Integer.valueOf((_computeExp / _computeExp_1));
      }
    }
    if (!_matched) {
      if (exp instanceof Num) {
        _matched=true;
        _switchResult = Integer.valueOf(((Num)exp).getValue());
      }
    }
    if (!_matched) {
      if (exp instanceof Var) {
        _matched=true;
        _switchResult = env.get(((Var)exp).getId());
      }
    }
    if (!_matched) {
      if (exp instanceof Let) {
        _matched=true;
        _switchResult = Integer.valueOf(this.computeExp(((Let)exp).getBody(), this.bind(env, ((Let)exp).getId(), this.computeExp(((Let)exp).getBinding(), env))));
      }
    }
    if (!_matched) {
      throw new Error("Compute: Invalid expression");
    }
    return (_switchResult).intValue();
  }
  
  public Map<String, Integer> bind(final Map<String, Integer> env1, final String name, final int value) {
    HashMap<String, Integer> _xblockexpression = null;
    {
      final HashMap<String, Integer> env2 = new HashMap<String, Integer>(env1);
      env2.put(name, Integer.valueOf(value));
      _xblockexpression = env2;
    }
    return _xblockexpression;
  }
  
  public String displayExp(final Expression exp) {
    CharSequence _switchResult = null;
    boolean _matched = false;
    if (exp instanceof Plus) {
      _matched=true;
      String _displayExp = this.displayExp(((Plus)exp).getLeft());
      String _plus = (_displayExp + "+");
      String _displayExp_1 = this.displayExp(((Plus)exp).getRight());
      _switchResult = (_plus + _displayExp_1);
    }
    if (!_matched) {
      if (exp instanceof Minus) {
        _matched=true;
        String _displayExp = this.displayExp(((Minus)exp).getLeft());
        String _plus = (_displayExp + "-");
        String _displayExp_1 = this.displayExp(((Minus)exp).getRight());
        _switchResult = (_plus + _displayExp_1);
      }
    }
    if (!_matched) {
      if (exp instanceof Mult) {
        _matched=true;
        String _displayExp = this.displayExp(((Mult)exp).getLeft());
        String _plus = (_displayExp + "*");
        String _displayExp_1 = this.displayExp(((Mult)exp).getRight());
        _switchResult = (_plus + _displayExp_1);
      }
    }
    if (!_matched) {
      if (exp instanceof Div) {
        _matched=true;
        String _displayExp = this.displayExp(((Div)exp).getLeft());
        String _plus = (_displayExp + "/");
        String _displayExp_1 = this.displayExp(((Div)exp).getRight());
        _switchResult = (_plus + _displayExp_1);
      }
    }
    if (!_matched) {
      if (exp instanceof Num) {
        _matched=true;
        _switchResult = Integer.toString(((Num)exp).getValue());
      }
    }
    if (!_matched) {
      if (exp instanceof Var) {
        _matched=true;
        _switchResult = ((Var)exp).getId();
      }
    }
    if (!_matched) {
      if (exp instanceof Let) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("let ");
        String _id = ((Let)exp).getId();
        _builder.append(_id);
        _builder.append(" = ");
        String _displayExp = this.displayExp(((Let)exp).getBinding());
        _builder.append(_displayExp);
        _builder.append(" in ");
        String _displayExp_1 = this.displayExp(((Let)exp).getBody());
        _builder.append(_displayExp_1);
        _builder.append(" end");
        _switchResult = _builder;
      }
    }
    if (!_matched) {
      throw new Error("Invalid expression");
    }
    String _plus = ("(" + _switchResult);
    return (_plus + ")");
  }
}
